from urllib.request import *
from json import *
from datetime import *
from operator import *
from utility import *

# GIVEN FUNCTIONS:
# Use these two as-is and do not change them
def get_json(url):
   ''' Function to get a json dictionary from a website.
       url - a string'''
   with urlopen(url) as response:
      html = response.read()
   htmlstr = html.decode("utf-8")
   return loads(htmlstr)

def time_to_str(time):
   ''' Converts integer seconds since epoch to a string.
       time - an int '''
   return datetime.fromtimestamp(time).strftime('%Y-%m-%d %H:%M:%S')    
   
# Add Earthquake class definition here   
class Earthquake:
   def __init__(self, place, mag, longitude, latitude, time):
      self.place = place
      self.mag = mag
      self.longitude = longitude
      self.latitude = latitude
      self.time = time   

   def __eq__(self, other):
      return self.place == other.place and \
             epsilon_equal(self.mag, other.mag) and \
	     epsilon_equal(self.longitude, other.longitude) and \
             epsilon_equal(self.latitude, other.latitude) and \
             self.time == other.time

   def __repr__(self):
      return self.place + ' ' + str(self.mag) + ' ' + str(self.longitude) + ' ' + str(self.latitude) + ' ' + str(self.time)

   def __str__(self):
      return '(%.2f)%40s at %s (%8.3f, %.3f)' % (self.mag, self.place, time_to_str(self.time), self.longitude, self.latitude)

# Required function - implement me!   
def read_quakes_from_file(filename):
   f = open(filename, 'r')
   quakes = []
   for line in f:
      line = line.split()
      place = ' '.join(line[4:])
      mag = float(line[0])
      longitude = float(line[1])
      latitude = float(line[2])
      time = int(line[3])
      quakes.append(Earthquake(place, mag, longitude, latitude, time))
   f.close()
   return quakes
      
# Required function - implement me!
def filter_by_mag(quakes, low, high):
   filtered = []
   low = float(low)
   high = float(high)
   for quake in quakes:
      if quake.mag <= high and quake.mag >= low:
         filtered.append(quake)
   return filtered     
     
# Required function - implement me!
def filter_by_place(quakes, word):   
   filtered = []
   word = word.lower()
   for quake in quakes:
      quake_place = quake.place.lower()
      if word in quake_place:
         filtered.append(quake)
   return filtered

# Required function for final part - implement me too!   
def quake_from_feature(feature):
   place = feature['properties']['place']
   mag = feature['properties']['mag']   
   longitude = feature['geometry']['coordinates'][0]
   latitude = feature['geometry']['coordinates'][1]
   time = int(feature['properties']['time'] / 1000)
   new = Earthquake(place, mag, longitude, latitude, time)
   return new   

def print_earthquakes(quakes):
   print('\nEarthquakes:\n------------')
   for quake in quakes:
      print(quake)
   print('\nOptions:\n  (s)ort\n  (f)ilter\n  (n)ew quakes\n  (q)uit\n') 

def sorting_quakes(quakes, sort_by):
   sort_quakes = list(quakes)
   sort_by = sort_by.lower()
   if sort_by == 'm':
      sort_quakes.sort(key = attrgetter('mag'), reverse = True)
   elif sort_by == 't':
      sort_quakes.sort(key = attrgetter('time'), reverse = True)
   elif sort_by == 'l':
      sort_quakes.sort(key = attrgetter('longitude'))from quakeFuncs import *

def main():
   quakes = read_quakes_from_file('quakes.txt')
   print_earthquakes(quakes)
   res = str(input('Choice: '))

   while res.lower() != 'q':
      if res.lower() == 's':
         sort_by = str(input('Sort by (m)agnitude, (t)ime, (l)ongitude, or l(a)titude? '))
         quakes = sorting_quakes(quakes, sort_by)
         print_earthquakes(quakes)   
      elif res.lower() == 'f':
         filter_by = str(input('Filter by (m)agnitude or (p)lace? '))
         if filter_by.lower() == 'p':
            search = str(input('Search for what string? '))
            quakes_out = filter_by_place(quakes, search)
            print_earthquakes(quakes_out)
         if filter_by.lower() == 'm':
            low = float(input('Lower bound: '))
            high = float(input('Upper bound: '))
            quakes_out = filter_by_mag(quakes, low, high)
            print_earthquakes(quakes_out)
      elif res.lower() == 'n':
         dict1 =  get_json('http://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/1.0_hour.geojson')
         features = dict1['features']
         n = False
         for feature in features:
            new = quake_from_feature(feature)
            if not new in quakes:
               quakes.append(new)
               n = True
         if n == True:
            print('\nNew quakes found!!!') 
         print_earthquakes(quakes)   
      res = str(input('Choice: '))

   out = open('quakes.txt', 'w')
   for quake in quakes:
      data = quake_back_to_file(quake)
      out.write(data + '\n')
   out.close()

if __name__ == "__main__":
   main()

   elif sort_by == 'a':
      sort_quakes.sort(key = attrgetter('latitude'))
   return sort_quakes

def quake_back_to_file(quake):
   list_out = []
   list_out.append(str(quake.mag))
   list_out.append(str(quake.longitude))
   list_out.append(str(quake.latitude))
   list_out.append(str(quake.time))
   list_out.append(quake.place)import unittest
from quakeFuncs import *

class TestCases(unittest.TestCase):
          
   def test_earthquake_init(self):
      quake = Earthquake('12km SSW of Idyllwild, CA', 0.97, -116.7551651, 33.6391678, 1488177290)
      self.assertEqual(quake.place, '12km SSW of Idyllwild, CA')
      self.assertAlmostEqual(quake.mag, 0.97)
      self.assertAlmostEqual(quake.longitude, -116.7551651)
      self.assertAlmostEqual(quake.latitude, 33.6391678)
      self.assertEqual(quake.time, 1488177290)  

   def test_earthquakes_equal_0(self):   
      quake1 = Earthquake('12km SSW of Idyllwild, CA', 0.97, -116.7551651, 33.6391678, 1488177290)  
      quake2 = Earthquake('12km SSW of Idyllwild, CA', 0.97, -116.7551651, 33.6391678, 1488177290)  
      self.assertEqual(quake1, quake2)

   def test_earthquakes_equal_1(self):   
      quake1 = Earthquake('12km SSW of Idyllwild, CA', 0.97, -116.7551651, 33.6391678, 1488177290)  
      quake2 = Earthquake('13km SSW of Idyllwild, CA', 0.97, -116.7551651, 33.6391678, 1488177290)  
      self.assertNotEqual(quake1, quake2)

   def test_read_file_0(self):
      quakes = []
      quakes.append(Earthquake('12km SSW of Idyllwild, CA', 0.97, -116.7551651, 33.6391678, 1488177290))
      quakes.append(Earthquake('5km S of Gilroy, California', 2.19, -121.5801697, 36.9580002, 1488173538))
      # call read_file with 'test0.txt'
      self.assertEqual(read_quakes_from_file('test0.txt'), quakes)

   def test_filter_by_mag_0(self):
      quakes = []
      quakes.append(Earthquake('12km SSW of Idyllwild, CA', 0.97, -116.7551651, 33.6391678, 1488177290))
      quakes.append(Earthquake('5km S of Gilroy, California', 2.19, -121.5801697, 36.9580002, 1488173538))
      quakes.append(Earthquake('100km SE of King Salmon, Alaska', 1.9, -155.2835, 58.1548, 1488219604))
      filtered = []
      filtered.append(Earthquake('5km S of Gilroy, California', 2.19, -121.5801697, 36.9580002, 1488173538))
      filtered.append(Earthquake('100km SE of King Salmon, Alaska', 1.9, -155.2835, 58.1548, 1488219604))
      self.assertEqual(filter_by_mag(quakes, 1, 3), filtered)

   def test_filter_by_place_0(self):
      quakes = []
      quakes.append(Earthquake('12km SSW of Idyllwild, ca', 0.97, -116.7551651, 33.6391678, 1488177290))
      quakes.append(Earthquake('5km S of Gilroy, california', 2.19, -121.5801697, 36.9580002, 1488173538))
      quakes.append(Earthquake('100km SE of King Salmon, Alaska', 1.9, -155.2835, 58.1548, 1488219604))
      filtered = []
      filtered.append(Earthquake('12km SSW of Idyllwild, ca', 0.97, -116.7551651, 33.6391678, 1488177290))
      filtered.append(Earthquake('5km S of Gilroy, california', 2.19, -121.5801697, 36.9580002, 1488173538))
      self.assertEqual(filter_by_place(quakes, "ca"), filtered)

   def test_sorting_quakes_1(self):
      quakes = []
      quakes.append(Earthquake('12km SSW of Idyllwild, ca', 0.97, -116.7551651, 33.6391678, 1488177290))
      quakes.append(Earthquake('5km S of Gilroy, california', 2.19, -121.5801697, 36.9580002, 1488173538))
      quakes.append(Earthquake('100km SE of King Salmon, Alaska', 1.9, -155.2835, 58.1548, 1488219604))
      sort_quakes = []
      sort_quakes.append(Earthquake('5km S of Gilroy, california', 2.19, -121.5801697, 36.9580002, 1488173538)) 
      sort_quakes.append(Earthquake('100km SE of King Salmon, Alaska', 1.9, -155.2835, 58.1548, 1488219604))
      sort_quakes.append(Earthquake('12km SSW of Idyllwild, ca', 0.97, -116.7551651, 33.6391678, 1488177290))
      self.assertEqual(sorting_quakes(quakes, 'm'), sort_quakes)

   def test_sorting_quakes_2(self):
      quakes = []
      quakes.append(Earthquake('12km SSW of Idyllwild, ca', 0.97, -116.7551651, 33.6391678, 1488177290))
      quakes.append(Earthquake('5km S of Gilroy, california', 2.19, -121.5801697, 36.9580002, 1488173538))
      quakes.append(Earthquake('100km SE of King Salmon, Alaska', 1.9, -155.2835, 58.1548, 1488219604))
      sort_quakes = []
      sort_quakes.append(Earthquake('100km SE of King Salmon, Alaska', 1.9, -155.2835, 58.1548, 1488219604))
      sort_quakes.append(Earthquake('12km SSW of Idyllwild, ca', 0.97, -116.7551651, 33.6391678, 1488177290))
      sort_quakes.append(Earthquake('5km S of Gilroy, california', 2.19, -121.5801697, 36.9580002, 1488173538))
      self.assertEqual(sorting_quakes(quakes, 't'), sort_quakes)

# Use this test when ready to work on the json data. 
   def test_quake_from_feature(self):
      feature = {
            "geometry": {
                "coordinates": [
                    -117.4906667,
                    33.9131667,
                    0.25
                ],
                "type": "Point"
            },
            "id": "ci37814000",
            "properties": {
                "code": "37814000",
                "detail": "http://earthquake.usgs.gov/earthquakes/feed/v1.0/detail/ci37814000.geojson",
                "dmin": 0.2836,
                "gap": 87,
                "ids": ",ci37814000,",
                "mag": 1.24,
                "magType": "ml",
                "net": "ci",
                "nst": 8,
                "place": "5km NE of Home Gardens, CA",
                "rms": 0.27,
                "sig": 24,
                "sources": ",ci,",
                "status": "automatic",
                "time": 1488179250520,
                "title": "M 1.2 - 5km NE of Home Gardens, CA",
                "tsunami": 0,
                "type": "earthquake",
                "types": ",geoserve,nearby-cities,origin,phase-data,scitech-link,",
                "tz": -480,
                "updated": 1488179487273,
                "url": "http://earthquake.usgs.gov/earthquakes/eventpage/ci37814000"
            },
            "type": "Feature"
        }
      quake1 = quake_from_feature(feature)
      quake2 = Earthquake("5km NE of Home Gardens, CA", 1.24, -117.4906667, 33.9131667, 1488179250)
      self.assertEqual(quake1, quake2)

      
# Run the unit tests.
if __name__ == '__main__':
   unittest.main()


   line = ' '.join(list_out)
   return line
